{"version":3,"file":"error-cache.js","sources":["../../../src/-private/utils/error-cache.js"],"sourcesContent":["import { A as emberArray, makeArray } from '@ember/array';\nimport debug from 'debug';\nimport { tracked } from '@glimmer/tracking';\nimport hasEqualUrls from './has-equal-urls';\nimport normalizeIdentifier from './normalize-identifier';\nimport { inject as service } from '@ember/service';\n\n/**\n * This class caches errors based on urls.\n * @private\n * @class ErrorCache\n */\n\nexport default class ErrorCache {\n  @service stereo;\n\n  @tracked cachedCount = 0;\n  @tracked cachedErrors = [];\n  @tracked cachedList = [];\n  @tracked _cache = {};\n  name = 'ember-stereo:error-cache';\n\n  reset() {\n    this._cache = {};\n    this.cachedCount = 0;\n    this.cachedList = [];\n    this.cachedErrors = [];\n  }\n\n  /**\n   * find - finds sounds in the cache by urls\n   * @method find\n   * @param {string} urls\n   * @return {Sound}\n   */\n  find(urls) {\n    let identifiers = makeArray(urls).map((i) => normalizeIdentifier(i));\n    let errors = emberArray(identifiers).map((identity) =>\n      this.cachedErrors.find((err) => hasEqualUrls(err.url, identity))\n    );\n    let foundErrors = emberArray(errors).compact();\n\n    if (foundErrors.length > 0) {\n      debug(this.name)(`cache hit for ${foundErrors[0].url}`);\n      return foundErrors[0];\n    } else {\n      debug(this.name)(`cache miss for ${makeArray(identifiers).join(',')}`);\n    }\n  }\n\n  remove(urls) {\n    let identifiers = makeArray(urls).map((i) => normalizeIdentifier(i));\n    this.cachedErrors = this.cachedErrors.filter(\n      (err) => !hasEqualUrls(err.url, identifiers)\n    );\n\n    identifiers.forEach((identity) => {\n      delete this._cache[identity];\n    });\n  }\n\n  cache({ url, error, connectionKey, debugInfo }) {\n    let identifier = normalizeIdentifier(url);\n\n    if (!this._cache[identifier]) {\n      this._cache[identifier] = {};\n    }\n\n    let errorObject = this._cache[identifier];\n    errorObject.url = url;\n\n    if (!errorObject.errors) {\n      errorObject.errors = {};\n    }\n\n    if (!connectionKey) {\n      errorObject.errors.generic = error;\n    } else {\n      errorObject.errors[connectionKey] = error;\n    }\n\n    if (debugInfo) {\n      errorObject._debug = debugInfo;\n    }\n    this._cache[identifier] = errorObject;\n\n    this.cachedCount = Object.keys(this._cache).length;\n    this.cachedList = Object.keys(this._cache);\n    this.cachedErrors = Object.values(this._cache);\n  }\n}\n"],"names":["ErrorCache","_class","constructor","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_defineProperty","reset","_cache","cachedCount","cachedList","cachedErrors","find","urls","identifiers","makeArray","map","i","normalizeIdentifier","errors","emberArray","identity","err","hasEqualUrls","url","foundErrors","compact","length","debug","name","join","remove","filter","forEach","cache","error","connectionKey","debugInfo","identifier","errorObject","generic","_debug","Object","keys","values","_applyDecoratedDescriptor","prototype","service","configurable","enumerable","writable","initializer","tracked"],"mappings":"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"}