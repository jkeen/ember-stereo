{"version":3,"file":"connection-loader.js","sources":["../../../src/-private/utils/connection-loader.js"],"sourcesContent":["import { assert } from '@ember/debug';\nimport { dasherize } from '@ember/string';\nimport { getOwner } from '@ember/application';\nimport { tracked } from '@glimmer/tracking';\nimport { isEmpty } from '@ember/utils';\n/* This class loads system/user connections */\n\nexport default class ConnectionLoader {\n  @tracked loaded = {};\n  @tracked connectionOrder = [];\n\n  constructor(service, connectionsToLoad) {\n    this.service = service;\n\n    this.load(connectionsToLoad);\n    this.connectionOrder = connectionsToLoad.map((info) => {\n      return typeof info === 'string' ? info : info.name;\n    });\n  }\n\n  // get loaded connection objects in order specified by system options\n  get connections() {\n    return this.names.map((name) => this.loaded[name]);\n  }\n\n  get names() {\n    return this.connectionOrder.filter((name) => !!this.loaded[name]);\n  }\n\n  get(name) {\n    return this.loaded[name];\n  }\n\n  /**\n   * Loads the connections as specified in the config options\n   *\n   * @method load\n   * @private\n   * @param {Array} connectionOptions\n   * @return {Object} instantiated connections\n   */\n\n  load(connectionsToLoad) {\n    assert(\n      `[ember-stereo] ConnectionLoader needs an array of connection, you provided ${connectionsToLoad}`,\n      !isEmpty(connectionsToLoad)\n    );\n    connectionsToLoad.forEach((connectionOption) => {\n      let name, connection;\n      if (typeof connectionOption === 'string') {\n        name = connectionOption;\n        connection = this.activate({ name, config: {} });\n      } else {\n        name = connectionOption.name;\n        connection = this.activate(connectionOption);\n      }\n\n      this.loaded[name] = connection;\n    });\n  }\n\n  /**\n   * Activates the a single connection\n   *\n   * @method activate\n   * @private\n   * @param {Object} {name, config}\n   * @return {Connection} instantiated Connection\n   */\n\n  activate({ name, config } = {}) {\n    const Connection = this.lookup(name);\n    assert('[ember-stereo] Could not find stereo connection ${name}.', name);\n\n    Connection.setup(config);\n    return Connection;\n  }\n\n  /**\n   * Looks up the connection from the container. Prioritizes the consuming app's\n   * connections over the addon's connections.\n   *\n   * @method lookup\n   * @param {String} connectionName\n   * @private\n   * @return {Connection} a local connection or a connection from the addon\n   */\n\n  lookup(connectionName) {\n    assert(\n      '[ember-stereo] Could not find a stereo connection without a name.',\n      connectionName\n    );\n    const dasherizedConnectionName = dasherize(connectionName);\n    const availableConnection = getOwner(this.service).lookup(\n      `ember-stereo@stereo-connection:${dasherizedConnectionName}`\n    );\n    const localConnection = getOwner(this.service).lookup(\n      `stereo-connection:${dasherizedConnectionName}`\n    );\n\n    assert(\n      `[ember-stereo] Could not load stereo connection ${dasherizedConnectionName}`,\n      localConnection || availableConnection\n    );\n\n    return localConnection ? localConnection : availableConnection;\n  }\n}\n"],"names":["ConnectionLoader","_class","constructor","service","connectionsToLoad","_initializerDefineProperty","_descriptor","_descriptor2","load","connectionOrder","map","info","name","connections","names","loaded","filter","get","assert","isEmpty","forEach","connectionOption","connection","activate","config","Connection","lookup","setup","connectionName","dasherizedConnectionName","dasherize","availableConnection","getOwner","localConnection","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer"],"mappings":"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"}