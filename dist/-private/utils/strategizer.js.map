{"version":3,"file":"strategizer.js","sources":["../../../src/-private/utils/strategizer.js"],"sourcesContent":["import { tracked } from '@glimmer/tracking';\nimport Strategy from './strategy';\nimport StereoUrl from './stereo-url';\nimport { makeArray, A as emberArray } from '@ember/array';\nimport { isEmpty } from '@ember/utils';\nimport { cached } from 'tracked-toolbox';\nimport { assert } from '@ember/debug';\nimport { getOwner, setOwner } from '@ember/application';\nimport debug from 'debug';\n\nexport default class Strategizer {\n  @tracked urls;\n  @tracked options;\n\n  constructor(urls, options) {\n    assert('urls must be provided to the strategizer', !isEmpty(urls));\n\n    this.urls = urls;\n    this.connections = options.connections;\n    this.metadata = options.metadata;\n    this.options = options;\n  }\n\n  buildStrategy(connection, url) {\n    let passthroughOptions = {};\n    if (this.options.xhr) {\n      passthroughOptions.xhr = this.options?.xhr;\n    }\n    let strategyOptions = {\n      metadata: this.options.metadata,\n      sharedAudioAccess: this.useSharedAudioAccess\n        ? this.sharedAudioAccess\n        : undefined,\n      options: passthroughOptions,\n    };\n\n    let strategy = new Strategy(\n      connection,\n      new StereoUrl(url),\n      strategyOptions\n    );\n    setOwner(strategy, getOwner(this));\n    return strategy;\n  }\n\n  get sharedAudioAccess() {\n    return this.options.sharedAudioAccess;\n  }\n\n  get useSharedAudioAccess() {\n    return !!this.options.useSharedAudioAccess;\n  }\n\n  get useMobileStrategy() {\n    return !!this.options.isMobileDevice;\n  }\n\n  get useStandardStrategy() {\n    return !this.useCustomStrategy && !this.useMobileStrategy;\n  }\n\n  get useCustomStrategy() {\n    return !isEmpty(this.options.useConnections);\n  }\n\n  get specifiedConnections() {\n    let connections = [];\n    if (this.options.useConnections) {\n      makeArray(this.options.useConnections).forEach((conn) => {\n        let match = this.connections.find(\n          (c) => c.key == conn || c.key == conn.key\n        );\n        if (match) {\n          connections.push(match);\n        }\n      });\n    } else {\n      connections = this.connections;\n    }\n\n    if (isEmpty(connections)) {\n      throw new Error('No connections selected');\n    }\n\n    return connections;\n  }\n\n  /* Given a list of urls, prepare the strategy that we think will succeed best\n   *\n   * Breadth first: we try each url on each compatible connection in order\n   * [{connection: NativeAudio, url: url1},\n   *  {connection: HLS, url: url1},\n   *  {connection: Other, url: url1},\n   *  {connection: NativeAudio, url: url2},\n   *  {connection: HLS, url: url2},\n   *  {connection: Other, url: url2}]\n   */\n\n  @cached\n  get strategies() {\n    let strategies = emberArray();\n    this.urls.forEach((url) => {\n      this.specifiedConnections.forEach((connection) => {\n        strategies.push(this.buildStrategy(connection, url));\n      });\n    });\n\n    if (this.useMobileStrategy) {\n        debug('ember-stereo:strategizer')(`re-rodering to prioritize native audio first`);\n\n      /*\n       * Take our standard strategy and reorder it to prioritize native audio\n       * first since it's most likely to succeed and play immediately with our\n       * audio unlock logic\n\n       * we try each url on each compatible connection in order\n       * [{connection: NativeAudio, url: url1},\n       *  {connection: NativeAudio, url: url2},\n       *  {connection: HLS, url: url1},\n       *  {connection: Other, url: url1},\n       *  {connection: HLS, url: url2},\n       *  {connection: Other, url: url2}]\n       *\n       * */\n\n      let nativeStrategies = strategies.filter(\n        (f) => f.connectionKey == 'NativeAudio'\n      );\n      let otherStrategies = strategies.filter(\n        (f) => f.connectionKey != 'NativeAudio'\n      );\n      let orderedStrategies = nativeStrategies.concat(otherStrategies);\n\n      return orderedStrategies;\n    }\n\n    return strategies;\n  }\n}\n"],"names":["Strategizer","_class","constructor","urls","options","_initializerDefineProperty","_descriptor","_descriptor2","assert","isEmpty","connections","metadata","buildStrategy","connection","url","passthroughOptions","xhr","strategyOptions","sharedAudioAccess","useSharedAudioAccess","undefined","strategy","Strategy","StereoUrl","setOwner","getOwner","useMobileStrategy","isMobileDevice","useStandardStrategy","useCustomStrategy","useConnections","specifiedConnections","makeArray","forEach","conn","match","find","c","key","push","Error","strategies","emberArray","debug","nativeStrategies","filter","f","connectionKey","otherStrategies","orderedStrategies","concat","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","cached","Object","getOwnPropertyDescriptor"],"mappings":"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"}