{"version":3,"file":"stereo.js","sources":["../../src/services/stereo.js"],"sourcesContent":["import Service from '@ember/service';\nimport { tracked } from '@glimmer/tracking';\nimport { getOwner, setOwner } from '@ember/application';\nimport { A as emberArray, makeArray } from '@ember/array';\nimport { assert } from '@ember/debug';\nimport {\n  race,\n  task,\n  waitForProperty,\n  waitForEvent,\n  didCancel,\n} from 'ember-concurrency';\nimport { cancel, later, next } from '@ember/runloop';\nimport { isTesting, macroCondition } from '@embroider/macros';\nimport canAutoplay from 'can-autoplay';\nimport debug from 'debug';\nimport config from 'ember-get-config';\n\nimport EmberEvented from '@ember/object/evented';\nimport ErrorCache from '../-private/utils/error-cache';\nimport OneAtATime from '../-private/utils/one-at-a-time';\nimport UrlCache from '../-private/utils/url-cache';\nimport MetadataCache from '../-private/utils/metadata-cache';\nimport SharedAudioAccess from '../-private/utils/shared-audio-access';\nimport SoundCache from '../-private/utils/sound-cache';\nimport UntrackedObjectCache from '../-private/utils/untracked-object-cache';\nimport Strategizer from '../-private/utils/strategizer';\nimport StereoUrl from '../-private/utils/stereo-url';\nimport SoundProxy from '../-private/utils/sound-proxy';\nimport ConnectionLoader from '../-private/utils/connection-loader';\nimport BaseSound from '../stereo-connections/base';\n\nconst DEFAULT_CONNECTIONS = [\n  { name: 'NativeAudio' },\n  { name: 'Howler' },\n  { name: 'HLS' },\n];\n\nexport const EVENT_MAP = [\n  { event: 'audio-played', handler: '_relayPlayedEvent' },\n  { event: 'audio-paused', handler: '_relayPausedEvent' },\n  { event: 'audio-blocked', handler: '_relayBlockedEvent' },\n  { event: 'audio-ended', handler: '_relayEndedEvent' },\n  { event: 'audio-duration-changed', handler: '_relayDurationChangedEvent' },\n  { event: 'audio-position-changed', handler: '_relayPositionChangedEvent' },\n  { event: 'audio-loaded', handler: '_relayLoadedEvent' },\n  { event: 'audio-loading', handler: '_relayLoadingEvent' },\n  {\n    event: 'audio-position-will-change',\n    handler: '_relayPositionWillChangeEvent',\n  },\n  { event: 'audio-will-rewind', handler: '_relayWillRewindEvent' },\n  { event: 'audio-will-fast-forward', handler: '_relayWillFastForwardEvent' },\n  { event: 'audio-metadata-changed', handler: '_relayMetadataChangedEvent' },\n];\n\nexport const SERVICE_EVENT_MAP = [\n  { event: 'current-sound-changed' },\n  { event: 'current-sound-interrupted' },\n  { event: 'new-load-request' },\n  { event: 'pre-load' },\n];\n\n/**\n * This is the stereo service class.\n *\n * @class stereo\n * @constructor\n */\nexport default class Stereo extends Service.extend(EmberEvented) {\n  @tracked autoPlayAllowed = false;\n\n  @tracked soundCache = new SoundCache();\n  @tracked errorCache = new ErrorCache();\n  @tracked metadataCache = new MetadataCache();\n  @tracked urlCache = new UrlCache();\n  proxyCache = new UntrackedObjectCache();\n\n  constructor() {\n    super(...arguments);\n    const owner = getOwner(this);\n    owner.registerOptionsForType('ember-stereo@stereo-connection', {\n      instantiate: false,\n    });\n    owner.registerOptionsForType('stereo-connection', { instantiate: false });\n\n    this.loadConnections();\n\n    this.defaultVolume = this.systemStereoOptions?.initialVolume || 100;\n    this.volume = this.defaultVolume;\n\n    this.sharedAudioAccess = new SharedAudioAccess();\n    this.oneAtATime = new OneAtATime();\n\n    setOwner(this.oneAtATime, owner);\n    setOwner(this.soundCache, owner);\n    setOwner(this.errorCache, owner);\n    setOwner(this.metadataCache, owner);\n    setOwner(this.urlCache, owner);\n    setOwner(this.proxyCache, owner);\n\n    if (macroCondition(isTesting())) {\n      // no checks for autoplay as it messes with the fake media element\n    } else {\n      this._determineAutoplayPermissions();\n    }\n    this.isReady = true;\n  }\n\n  /** currently loaded {Sound} object\n   * @property currentSound\n   * @type {Sound}\n   * @public\n   */\n  @tracked _currentSound = null;\n\n  /**\n   * is user input needed to allow an autoplay request?\n   * @property isBlocked\n   * @type {Boolean}\n   * @readOnly\n   * @public\n   */\n  get isBlocked() {\n    return this.currentSound?.isBlocked || false;\n  }\n\n  /**\n   * is the current sound playing\n   * @property isPlaying\n   * @type {Boolean}\n   * @readOnly\n   * @public\n   */\n  get isPlaying() {\n    return this.currentSound?.isPlaying || false;\n  }\n\n  /**\n   * is a sound loading?\n   * @property isLoading\n   * @type {Boolean}\n   * @readOnly\n   * @public\n   */\n  get isLoading() {\n    return (\n      this.loadTask.isRunning ||\n      (this.currentSound && this.currentSound.isLoading)\n    );\n  }\n\n  /**\n   * Current metadata object of the current sound. Use `{{sound-metadata}}` helper in templates\n   * @property currentMetadata\n   * @type {Object}\n   * @readOnly\n   * @public\n   */\n  get currentId3Data() {\n    return this.currentSound?.id3TagMetadata;\n  }\n\n  /**\n   * Current metadata object of the current sound. Use `{{sound-metadata}}` helper in templates\n   * @property currentMetadata\n   * @type {Object}\n   * @readOnly\n   * @public\n   */\n  get currentMetadata() {\n    return this.metadataCache.find(this.currentSound?.url);\n  }\n\n  /**\n   * is the current sound a stream?\n   * @property isStream\n   * @type {Boolean}\n   * @readOnly\n   * @public\n   */\n  get isStream() {\n    return this.currentSound?.isStream;\n  }\n\n  /**\n   * is the current sound seekable?\n   * @property isSeekable\n   * @type {Boolean}\n   * @readOnly\n   * @public\n   */\n  get isSeekable() {\n    return (\n      this.currentSound?.isFastForwardable || this.currentSound?.isRewindable\n    );\n  }\n\n  /**\n   * is the current sound fastforwardable?\n   * @property isFastForwardable\n   * @type {Boolean}\n   * @readOnly\n   * @public\n   */\n  get isFastForwardable() {\n    return this.currentSound?.isFastForwardable;\n  }\n\n  /**\n   * is the current sound rewindable?\n   * @property isRewindable\n   * @type {Boolean}\n   * @readOnly\n   * @public\n   */\n  get isRewindable() {\n    return this.currentSound?.isRewindable;\n  }\n\n  /**\n   * Duration of current sound in milliseconds. Use `{{numeric-duration}}` to convert, or the `{{sound-duration url format=time}}` template helper\n   * @property duration\n   * @type {Float}\n   * @readOnly\n   * @public\n   */\n  get duration() {\n    return this.currentSound?.duration;\n  }\n\n  /**\n   * Percent loaded of current sound\n   * @property percentLoaded\n   * @type {Float}\n   * @readOnly\n   * @public\n   */\n  get percentLoaded() {\n    return this.currentSound?.percentLoaded;\n  }\n\n  /**\n   * Get/set the current sound position\n   *\n   * @property position\n   * @type {Float}\n   * @public\n   */\n  get position() {\n    return this.currentSound?.position;\n  }\n  set position(v) {\n    this.currentSound.position = v;\n  }\n\n  /**\n   * Gets the current sound currentTime (only available on some sounds, like HLS streams with annotated time values)\n   * @property currentTime\n   * @type {Object}\n   * @readOnly\n   * @public\n   */\n  get currentTime() {\n    return this.currentSound?.currentTime;\n  }\n\n  /**\n   * Get/set the system volume, 0-100\n   *\n   * @property volume\n   * @type {Integer}\n\n  */\n  @tracked _volume = this.defaultVolume;\n  get volume() {\n    return this._volume;\n  }\n  set volume(v) {\n    if (this.currentSound) {\n      debug('ember-stereo:service')(`setting current sound volume = ${v}`);\n      this.currentSound._setVolume(v);\n    }\n    this._volume = v;\n    debug('ember-stereo:service')(`setting volume = ${v}`);\n    this.trigger('volume-change', v);\n  }\n\n  /**\n   * Get/set if hifi should treat this as a mobile device\n   *\n   * @property isMobileDevice\n   * @type {Boolean}\n\n  */\n\n  @tracked isMobileDevice = 'ontouchstart' in window;\n\n  /**\n   * get if hifi should use a shared audio element\n   *\n   * @property useSharedAudioAccess\n   * @type {Boolean}\n\n  */\n\n  _useSharedAudioElement = false;\n  get useSharedAudioAccess() {\n    return (\n      this._useSharedAudioElement ||\n      this.isMobileDevice ||\n      this.systemStereoOptions?.alwaysUseSingleAudioElement\n    );\n  }\n  set useSharedAudioAccess(value) {\n    this._useSharedAudioElement = value;\n  }\n\n  /**\n   * is the sound muted\n   * @property isMuted\n   * @type {Boolean}\n   * @readOnly\n   * @public\n   */\n  get isMuted() {\n    return this.volume === 0;\n  }\n\n  /**\n   * Toggles mute state. Sets volume to zero on mute, resets volume to the last level it was before mute, unless\n   * unless the last level was zero, in which case it sets it to the default volume\n   *\n   * @method toggleMute\n   * @public\n   */\n  toggleMute() {\n    if (this.isMuted) {\n      this.volume = this.unmuteVolume > 0 ? this.unmuteVolume : 100;\n      this.unmuteVolume = undefined;\n    } else {\n      if (this.volume > 0) {\n        this.unmuteVolume = this.volume;\n      }\n      this.volume = 0;\n    }\n  }\n\n  /**\n   * Ember concurrency task: Given an array of URLS, return a sound ready for playing\n   *\n   * @method loadTask\n   * @async\n   * @param {Array|Promise} urlsOrPromise [..{Promise|String}]\n   * @param {Object} options { metadata: {},\n   * @public\n   * Provide an array of urls to try, or a promise that will resolve to an array of urls\n   * @return {Sound} A sound that's ready to be played, or an error\n   */\n\n  prepareLoadOptions(options) {\n    return {\n      metadata: {},\n      sharedAudioAccess: this._createAndUnlockAudio(),\n      useSharedAudioAccess: this.useSharedAudioAccess,\n      isMobileDevice: this.isMobileDevice,\n      connections: this.connectionLoader.connections,\n      ...options,\n    };\n  }\n\n  @task({ restartable: true, evented: true })\n  *loadTask(urlsOrPromise, _options) {\n    let options = this.prepareLoadOptions(_options);\n\n    debug('ember-stereo:service')(`loadTask`, urlsOrPromise, options);\n    let urlsToTry = yield this.urlCache.resolve(urlsOrPromise);\n    debug('ember-stereo:service')(`given urls: ${urlsToTry.join(', ')}`);\n    this.trigger('pre-load', urlsToTry);\n    this.errorCache.remove(urlsToTry);\n\n    var sound = this.findLoadedSound(urlsToTry);\n    if (sound) {\n      debug('ember-stereo:service')('retreived sound from cache');\n      return yield { sound };\n    } else {\n      // TODO: refactor so it's more like this\n      // let strategizer = new Strategizer(urlsToTry, options)\n      // let { sound, error } = yield strategizer.tryLoading()\n      // if (sound) {\n      //  this.handleCurrentSoundTransitionTask.perform(sound)\n      //  this.soundCache.cache(sound);\n      //  this.oneAtATime.register(sound)\n      // }\n\n      try {\n        var strategies = this._buildStrategies(urlsToTry, options);\n        if (strategies.filter((s) => s.canPlay).length == 0) {\n          debug('ember-stereo:service')(\n            `all strategies (${strategies\n              .map((s) => s.connectionName)\n              .join(', ')}) reported canPlay = false`\n          );\n          return this._handlePreloadError({ urlsToTry, options, strategies });\n        }\n      } catch (e) {\n        debug('ember-stereo:service')('error building strategies', e);\n        return this._handlePreloadError({\n          urlsToTry,\n          options,\n          strategies: strategies || [],\n        });\n      }\n\n      var success = false;\n      let failures = [];\n\n      debug('ember-stereo:service')('strategies', strategies);\n\n      for (let strategy of strategies) {\n        if (strategy.canPlay) {\n          // worth trying\n          let result = yield this.tryLoadingSoundTask\n            .perform(strategy)\n            .catch((e) => {\n              strategy.error = e;\n            });\n          if (result.error) {\n            strategy.error = result.error;\n            strategy.erroredSound = result.erroredSound;\n            failures.push(strategy);\n          }\n          if (result.sound) {\n            debug('ember-stereo:service')(\n              `firing sound-ready for ${result.sound.url}`\n            );\n            this.trigger('sound-ready', { sound: result.sound });\n            sound = result.sound;\n            sound._debug = strategies;\n            success = true;\n            break;\n          }\n        }\n      }\n\n      if (success && sound) {\n        // eslint-disable-next-line ember-concurrency/no-perform-without-catch\n        this.handleCurrentSoundTransitionTask.perform(sound);\n\n        if (options.metadata) {\n          sound.metadata = {\n            ...sound.metadata,\n            ...options.metadata,\n          }; // set current sound metadata\n        }\n\n        this.soundCache.cache(sound);\n        this.oneAtATime.register(sound); // On audio-played this pauses all the other sounds. One at a time!\n        return { sound, failures };\n      } else {\n        return this._handleLoadError({\n          urlsToTry,\n          failures,\n          options,\n          strategies: strategies,\n        });\n      }\n    }\n  }\n\n  @task\n  *handleCurrentSoundTransitionTask(sound) {\n    while (true) {\n      yield waitForEvent(sound, 'audio-played');\n      debug('ember-stereo:service')('handling sound transition');\n\n      let previousSound = this.currentSound;\n      let currentSound = sound;\n\n      if (previousSound !== currentSound) {\n        if (previousSound?.isPlaying) {\n          this.trigger('current-sound-interrupted', { sound: previousSound });\n        }\n        this.trigger('current-sound-changed', {\n          sound: currentSound,\n          previousSound,\n        });\n        this.currentSound = sound;\n      }\n    }\n  }\n\n  /**\n   * Given an array of URLS, return a sound ready for playing\n   *\n   * @method load\n   * @async\n   * @public\n   * @param {Array|Promise} urlsOrPromise An array of urls or a promise that will resolve to an array of urls\n   * @return {Sound} A sound that's ready to be played, or an error\n   */\n\n  load(urlsOrPromise, options) {\n    options = { metadata: {}, ...options };\n\n    try {\n      let promise = this.loadTask.perform(urlsOrPromise, options);\n      this.trigger('new-load-request', {\n        loadPromise: promise,\n        urlsOrPromise,\n        options,\n      });\n\n      return promise;\n    } catch (e) {\n      if (!didCancel(e)) {\n        // re-throw the non-cancelation error\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * Given an array of URLs, return a sound and play it.\n   *\n   * @method playTask\n   * @async\n   * @public\n   * @param {Array|Promise} urlsOrPromise An array of urls or a promise that will resolve to an array of urls\n   * @return {Sound, failures} A sound that's playing, or an error\n   */\n\n  @task({ restartable: true })\n  *playTask(urlsOrPromise, options = {}) {\n    options = { metadata: {}, ...options };\n\n    debug('ember-stereo:service')(`playTask`, urlsOrPromise, options);\n\n    let previouslyPlayingSound = this.isPlaying ? this.currentSound : false;\n    if (\n      previouslyPlayingSound &&\n      previouslyPlayingSound.urlsAreEqual &&\n      previouslyPlayingSound.urlsAreEqual(urlsOrPromise)\n    ) {\n      return { sound: previouslyPlayingSound, failures: [] };\n    }\n\n    let loadPromise = this.loadTask.perform(urlsOrPromise, options);\n    this.trigger('new-load-request', { loadPromise, urlsOrPromise, options }); //urls: Promise.resolve(resolveUrls(urlsOrPromise))\n    let { sound, failures } = yield loadPromise;\n\n    if (sound) {\n      this._registerEvents(sound);\n      this._attemptToPlaySound(sound, options);\n\n      yield race([\n        waitForProperty(sound, 'isPlaying'),\n        waitForProperty(sound, 'isErrored'),\n      ]);\n\n      if (previouslyPlayingSound) {\n        this.trigger('current-sound-interrupted', {\n          sound: previouslyPlayingSound,\n        });\n      }\n\n      if (sound && 'position' in options) {\n        sound.position = options.position;\n      }\n\n      if (sound.isPlaying) {\n        return { sound, failures };\n      } else {\n        return this._handlePlaybackError({ sound, options });\n      }\n    } else {\n      return this._handleLoadError({ failures, options });\n    }\n  }\n\n  _shouldSilenceErrors(options) {\n    if (Object.keys(options || {}).includes('silenceErrors')) {\n      return options.silenceErrors;\n    } else if (\n      Object.keys(this.systemStereoOptions || {}).includes('silenceErrors')\n    ) {\n      return this.systemStereoOptions?.silenceErrors;\n    } else {\n      return false;\n    }\n  }\n\n  _determineAutoplayPermissions() {\n    canAutoplay.audio().then(({ result }) => {\n      if (result) {\n        this.autoPlayAllowed = true;\n      }\n    });\n  }\n\n  /**\n   * Given an array of URLs, return a sound and play it.\n   *\n   * @method play\n   * @async\n   * @param {Array|Promise} urlsOrPromise Provide an array of urls to try, or a promise that will resolve to an array of urls\n   * @return {Sound} A sound that's playing, or an error\n   */\n\n  play(urlsOrPromise, options = {}) {\n    try {\n      return this.playTask.perform(urlsOrPromise, options);\n    } catch (e) {\n      if (!didCancel(e)) {\n        // re-throw the non-cancelation error\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * Pauses the current sound\n   *\n   * @method pause\n   * @public\n   */\n\n  pause() {\n    assert('[ember-stereo] Nothing is playing.', this.currentSound);\n    this.currentSound.pause();\n  }\n\n  /**\n   * Stops the current sound\n   *\n   * @method stop\n   * @public\n   */\n\n  stop() {\n    this.loadTask.cancelAll();\n    this.playTask.cancelAll();\n\n    assert('[ember-stereo] Nothing is playing.', this.currentSound);\n    this.currentSound.stop();\n  }\n\n  /**\n   * Toggles play/pause state of the current sound\n   *\n   * @method togglePause\n   * @public\n   */\n\n  togglePause() {\n    assert('[ember-stereo] Nothing is playing.', this.currentSound);\n    if (this.isPlaying) {\n      return this.currentSound.pause();\n    } else {\n      return this.currentSound.play();\n    }\n  }\n\n  /**\n   * Fast forwards current sound if able\n   *\n   * @method fastForward\n   * @public\n   * @param {Integer} duration in ms\n   */\n\n  fastForward(duration) {\n    assert('[ember-stereo] Nothing is playing.', this.currentSound);\n    this.currentSound.fastForward(duration);\n  }\n\n  /**\n   * Rewinds current sound if able\n   *\n   * @method rewind\n   * @public\n   * @param {Integer} duration in ms\n   */\n\n  rewind(duration) {\n    assert('[ember-stereo] Nothing is playing.', this.currentSound);\n    this.currentSound.rewind(duration);\n  }\n\n  @task({ maxConcurrency: 5 })\n  *resolveIdentifierTask(identifier) {\n    return yield this.urlCache.resolve(identifier);\n  }\n\n  /* ------------------------ PRIVATE(ISH) STUFF ------------------------------ */\n  /* -------------------------------------------------------------------------- */\n  /* -------------------------------------------------------------------------- */\n\n  get systemStereoOptions() {\n    return config?.emberStereo;\n  }\n\n  _buildStrategies(urlsToTry, options) {\n    let strategizer = new Strategizer(urlsToTry, options);\n    setOwner(strategizer, getOwner(this));\n    return strategizer.strategies;\n  }\n\n  _handlePlaybackError({ sound, options }) {\n    let strategy = {\n      url: sound.url,\n      error: sound.error,\n      connectionKey: sound.connectionKey,\n    };\n    this.errorCache.cache({\n      url: sound.url,\n      error: sound.error,\n      connectionKey: sound.connectionKey,\n    });\n    this.trigger('audio-load-error', {\n      sound: sound,\n      failures: [strategy],\n      error: sound.error,\n    });\n\n    if (!this._shouldSilenceErrors(options)) {\n      throw new Error(sound.error || 'stereo playback error', {\n        sound,\n        failures: [strategy],\n      });\n    }\n\n    return { sound, failures: [strategy], error: strategy.error };\n  }\n\n  _handleLoadError({ /* urlsToTry */ failures, options, strategies }) {\n    let errorMessage = this._errorMessageFromFailures(failures);\n\n    let url = null;\n    makeArray(failures).forEach((sound) => {\n      this.errorCache.cache({\n        url: sound.url,\n        error: sound.error,\n        connectionKey: sound.connectionKey,\n        debugInfo: strategies,\n      });\n      url = sound.url;\n    });\n    this.trigger('audio-load-error', {\n      sound: { url },\n      failures: failures,\n      error: errorMessage,\n    });\n\n    if (!this._shouldSilenceErrors(options)) {\n      throw new Error(errorMessage || 'stereo load error', { failures });\n    }\n    return { failures, error: errorMessage };\n  }\n\n  _handlePreloadError({ urlsToTry, options, strategies }) {\n    let errorMessage = 'no connections responded';\n    let url = makeArray(urlsToTry)[0];\n    let failure = {\n      url,\n      error: errorMessage,\n      connectionKey: null,\n      debugInfo: strategies,\n    };\n\n    if (!this._shouldSilenceErrors(options)) {\n      throw new Error(errorMessage, failure);\n    }\n\n    this.errorCache.cache(failure);\n    this.trigger('audio-load-error', {\n      sound: { url },\n      failures: [failure],\n      error: errorMessage,\n    });\n\n    return { failures: [failure], error: errorMessage };\n  }\n\n  _errorMessageFromFailures(failures) {\n    let nativeAudioFailure = makeArray(failures).find(\n      (failure) => failure.connectionKey === 'NativeAudio'\n    );\n    let errorMessage = '';\n\n    if (nativeAudioFailure) {\n      errorMessage = nativeAudioFailure.error;\n    } else {\n      errorMessage = makeArray(failures)\n        .map((f) => f.error)\n        .filter((f) => f.toString().length > 0)[0];\n    }\n\n    return errorMessage;\n  }\n\n  /**\n   * Set the current sound and wire up all the events the sound fires so they\n   * trigger through the service, remove the ones on the previous current sound,\n   * and set the new current sound to the system volume\n   * @method currentSound\n   * @param {Sound} sound\n   * @private\n   */\n\n  get currentSound() {\n    return this._currentSound;\n  }\n\n  set currentSound(sound) {\n    if (this.isDestroyed || this.isDestroying) {\n      return; // should use ember-concurrency to cancel any pending promises in willDestroy\n    }\n    this._unregisterEvents(this._currentSound);\n\n    if (sound) {\n      this._registerEvents(sound);\n      this._updateNowPlaying(sound);\n      sound._setVolume(this.volume);\n      debug('ember-stereo:service')(`setting current sound -> ${sound.url}`);\n    } else {\n      debug('ember-stereo:service')(`setting current sound -> null`);\n    }\n\n    this._currentSound = sound;\n  }\n\n  /**\n   * Loads stereo connections\n   *\n   * @method loadConnections\n   * @param {Array} connections an array of connection objects\n   * @private\n   * @return {Array}\n   */\n\n  loadConnections(\n    connections = this.systemStereoOptions?.connections ||\n      emberArray(DEFAULT_CONNECTIONS)\n  ) {\n    this.connectionLoader = new ConnectionLoader(this, connections);\n    setOwner(this.connectionLoader, getOwner(this));\n    return this;\n  }\n\n  /**\n   * Returns the list of activated and available connections\n   *\n   * @property connections\n   * @type {Array}\n   * @private\n   */\n\n  get connections() {\n    return this.connectionLoader.connections;\n  }\n\n  get connectionNames() {\n    return this.connectionLoader.names;\n  }\n\n  get loadedUrls() {\n    return this.soundCache.cachedList;\n  }\n\n  get loadedSounds() {\n    return this.soundCache.cachedSounds;\n  }\n\n  get cachedErrors() {\n    return this.errorCache.cachedErrors;\n  }\n\n  /**\n   * Given a sound, a url, or an object with a URL property, return a sound ready for playing\n   *\n   * @method findLoadedSound\n   * @param {Array} identifiers [..{Promise|String}]\n   * @private\n   * @return {Sound} A sound that's ready to be played, or an error\n   */\n\n  findLoadedSound(identifiers) {\n    if (identifiers instanceof BaseSound) {\n      return identifiers;\n    } else {\n      return this.soundCache.find(identifiers);\n    }\n  }\n\n  findSound(identifier) {\n    if (identifier instanceof BaseSound) {\n      return identifier;\n    } else {\n      return this.soundProxy(identifier)?.value;\n    }\n\n    //TODO: use a Proxy? it'd be neat to be able to 'find' a sound\n    // that isn't loaded and attach events to it.\n\n    // let soundProxy = this.soundProxy(identifier).value\n\n    // return new Proxy(soundProxy, {\n    //   get: function (target, prop, receiver) {\n    //     if (target.value) {\n    //       return Reflect.get(...[target.value, prop, receiver]);\n    //     } else {\n    //       return Reflect.get(...arguments);\n    //     }\n    //   }\n    // });\n  }\n\n  soundProxy(identifier) {\n    if (this.proxyCache.has(identifier)) {\n      return this.proxyCache.find(identifier);\n    } else if (identifier) {\n      let soundProxy = new SoundProxy(identifier, this);\n      this.proxyCache.store(identifier, soundProxy);\n      return soundProxy;\n    }\n  }\n\n  /**\n   * Given a sound, a url, or an object with a URL property, return a sound ready for playing\n   *\n   * @method removeSound\n   * @async\n   * @param {Array} identifier [..{Promise|String}]\n   * @private\n   * @return {Sound} A sound that's ready to be played, or an error\n   */\n\n  removeSound(identifier) {\n    let url = new StereoUrl(identifier).url;\n\n    this.soundCache.remove(url);\n    this.errorCache.remove(url);\n    this.proxyCache.remove(url);\n    this.metadataCache.remove(url);\n\n    if (this.currentSound?.url === url) {\n      this.currentSound = null;\n    }\n  }\n\n  /**\n   * Wait for sound to succeed\n   *\n   * @method waitForSuccessTask\n   * @private\n   * @param {Object} strategy a connection strategy object\n   * @param {Sound} sound a sound object to play\n   * @async\n   * @return {Object} { sound }\n   **/\n  @task\n  *waitForSuccessTask(strategy, sound) {\n    yield waitForProperty(sound, 'isReady');\n    debug('ember-stereo:service')(\n      `SUCCESS: [${strategy.connectionName}] -> (${strategy.url})`\n    );\n    strategy.success = true;\n    return { sound };\n  }\n\n  /**\n   * Wait for sound to succeed\n   *\n   * @method waitForSuccessTask\n   * @private\n   * @param {Object} strategy a connection strategy object\n   * @param {Sound} sound a sound object to play\n   * @async\n   * @return {Object} { error }\n   **/\n  @task\n  *waitForFailureTask(strategy, sound) {\n    yield waitForProperty(sound, 'isErrored');\n    debug('ember-stereo:service')(\n      `FAILED: [${strategy.connectionName}] -> ${sound.error} (${strategy.url})`\n    );\n    this._unregisterEvents(sound);\n    strategy.error = sound.error;\n    let result = { error: sound.error, erroredSound: sound };\n\n    return result;\n  }\n\n  /**\n   * Try loading sound\n   *\n   * @method tryLoadingSoundTask\n   * @private\n   * @param {Object} strategy a connection strategy object\n   * @return {Object} { sound } or { error }\n   **/\n  @task\n  *tryLoadingSoundTask(strategy) {\n    var newSound = strategy.createSound();\n    this._registerEvents(newSound);\n\n    debug('ember-stereo:service')(\n      `TRYING: [${strategy.connectionName}] -> ${strategy.url}`\n    );\n    strategy.tried = true;\n    return yield race([\n      this.waitForSuccessTask.perform(strategy, newSound),\n      this.waitForFailureTask.perform(strategy, newSound),\n    ]);\n  }\n\n  /**\n   * Register events on a current sound. Audio events triggered on that sound\n   * will be relayed and triggered on this service\n   *\n   * @method _registerEvents\n   * @param {Object} sound\n   * @private\n   */\n\n  _registerEvents(sound) {\n    let service = this;\n    EVENT_MAP.forEach((item) => {\n      sound.on(item.event, service, service[item.handler]);\n    });\n\n    // Internal event for cleanup\n    sound.on('_will_destroy', () => {\n      this._unregisterEvents(sound);\n    });\n\n    //window on close, send stop event to other tabs if playing?\n  }\n\n  /**\n   * Register events on a current sound. Audio events triggered on that sound\n   * will be relayed and triggered on this service\n   *\n   * @method _unregisterEvents\n   * @param {Object} sound\n   * @private\n   */\n\n  _unregisterEvents(sound) {\n    if (!sound) {\n      return;\n    }\n\n    let service = this;\n    EVENT_MAP.forEach((item) => {\n      try {\n        if (sound.has(item.event)) {\n          sound.off(item.event, service, service[item.handler]);\n        }\n      } catch (e) {\n        // unregistering errors are not super important\n      }\n    });\n  }\n\n  /**\n   * Relays an audio event on the sound to an event on the service\n   *\n   * @method _relayEvent\n   * @param {String, Object} eventName, sound\n   * @private\n   */\n\n  _relayEvent(eventName, info = {}) {\n    next(() => {\n      this.trigger(eventName, info);\n      debug('ember-stereo:service')(eventName, info);\n    });\n  }\n\n  // Named functions so Ember Evented can successfully register/unregister them\n\n  _relayPlayedEvent(info) {\n    this._updateNowPlaying(this.currentSound);\n    this._relayEvent('audio-played', info);\n  }\n  _relayPausedEvent(info) {\n    this._updateNowPlaying(this.currentSound);\n    this._relayEvent('audio-paused', info);\n  }\n  _relayEndedEvent(info) {\n    this._relayEvent('audio-ended', info);\n  }\n  _relayDurationChangedEvent(info) {\n    this._relayEvent('audio-duration-changed', info);\n  }\n  _relayPositionChangedEvent(info) {\n    this._relayEvent('audio-position-changed', info);\n  }\n  _relayLoadedEvent(info) {\n    this._relayEvent('audio-loaded', info);\n  }\n  _relayBlockedEvent(info) {\n    this._relayEvent('audio-blocked', info);\n  }\n  _relayLoadingEvent(info) {\n    this._relayEvent('audio-loading', info);\n  }\n  _relayPositionWillChangeEvent(info) {\n    this._relayEvent('audio-position-will-change', info);\n  }\n  _relayWillRewindEvent(info) {\n    this._relayEvent('audio-will-rewind', info);\n  }\n  _relayWillFastForwardEvent(info) {\n    this._relayEvent('audio-will-fast-forward', info);\n  }\n  _relayMetadataChangedEvent(info) {\n    this._updateNowPlaying(this.currentSound);\n    this._relayEvent('audio-metadata-changed', info);\n  }\n\n  /**\n   * Updates now playing info from metadata if appropriate keys exist\n   * @method _updateNowPlaying\n   * @param {Object} sound\n   * @private\n\n   */\n  _updateNowPlaying(sound) {\n    if (!sound) return;\n    if (sound.isDestroyed) return;\n\n    if (\n      window &&\n      navigator &&\n      'mediaSession' in navigator &&\n      'MediaMetadata' in window\n    ) {\n      if (sound.isPlaying) {\n        navigator.mediaSession.playbackState = 'playing';\n      } else {\n        navigator.mediaSession.playbackState = 'paused';\n      }\n\n      let { title, artist, album, artwork } = sound.metadata;\n\n      let mediaAttributes = {\n        title,\n        artist,\n        album,\n      };\n\n      if (makeArray(artwork).length > 0 && artwork[0]?.src) {\n        mediaAttributes.artwork = makeArray(artwork);\n      }\n\n      navigator.mediaSession.metadata = new MediaMetadata(mediaAttributes);\n\n      navigator.mediaSession.setActionHandler('play', () => {\n        if (!sound.isPlaying) {\n          sound.play();\n        }\n      });\n      navigator.mediaSession.setActionHandler('pause', () => {\n        if (sound.isPlaying) {\n          sound.pause();\n        }\n      });\n      navigator.mediaSession.setActionHandler('stop', () => {\n        sound.stop();\n      });\n      navigator.mediaSession.setActionHandler('seekbackward', () => {\n        if (sound.isRewindable) {\n          sound.rewind(15000);\n        }\n      });\n      navigator.mediaSession.setActionHandler('seekforward', () => {\n        if (sound.isFastForwardable) {\n          sound.fastForward(15000);\n        }\n      });\n      navigator.mediaSession.setActionHandler('seekto', (seekInfo) => {\n        if (sound.isSeekable) {\n          sound.position = seekInfo.seekTime * 1000;\n        }\n      });\n      // navigator.mediaSession.setActionHandler('previoustrack', () => {\n      //   /* Code excerpted. */\n      // });\n      // navigator.mediaSession.setActionHandler('nexttrack', () => {\n      //   /* Code excerpted. */\n      // });\n      // navigator.mediaSession.setActionHandler('skipad', () => {\n      //   /* Code excerpted. */\n      // });\n    }\n  }\n\n  /**\n   * Creates an empty audio element and plays it to unlock audio on a mobile (iOS)\n   * device at the beggining of a play event.\n   *\n   * @method _createAndUnlockAudio\n   * @private\n   * @return {element} an audio element\n   */\n\n  _createAndUnlockAudio() {\n    // Audio will play automatically if is Mobile device to get around\n    // autoplaying restrictions. If not, it won't autoplay because\n    // IE desktop browsers can't deal with that and will suddenly\n    // play the loading audio before it's ready\n\n    return this.sharedAudioAccess.unlock();\n  }\n\n  /**\n   * Attempts to play the sound after a load, which in certain cases can fail on mobile\n   * @method _attemptToPlaySound\n   * @param {Sound} sound\n   * @param {Object} options\n   * @private\n   */\n\n  _attemptToPlaySound(sound, options) {\n    // if (this.isMobileDevice) {\n    let touchPlay = () => {\n      debug('ember-stereo:service')(\n        `triggering sound play from document touch`\n      );\n      sound.play();\n    };\n\n    document.addEventListener('touchstart', touchPlay, { passive: true });\n\n    let blockCheck = later(() => {\n      debug('ember-stereo:service')(\n        `Looks like the mobile browser blocked an autoplay trying to play sound with url: ${sound.url}`\n      );\n      sound.isBlocked = true;\n      sound.trigger('audio-blocked');\n    }, 2000);\n\n    sound.one('audio-load-error', () => {});\n\n    sound.one('audio-played', () => {\n      document.removeEventListener('touchstart', touchPlay);\n      cancel(blockCheck);\n    });\n    // }\n    sound.play(options);\n\n    if (sound.isPlaying) {\n      cancel(blockCheck);\n    }\n  }\n\n  willDestroy() {\n    this.loadTask.cancelAll();\n    this.playTask.cancelAll();\n  }\n}\n"],"names":["DEFAULT_CONNECTIONS","name","EVENT_MAP","event","handler","SERVICE_EVENT_MAP","Stereo","_dec","task","restartable","evented","_dec2","_dec3","maxConcurrency","_class","Service","extend","EmberEvented","constructor","arguments","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_defineProperty","UntrackedObjectCache","_descriptor6","_descriptor7","_descriptor8","owner","getOwner","registerOptionsForType","instantiate","loadConnections","defaultVolume","systemStereoOptions","initialVolume","volume","sharedAudioAccess","SharedAudioAccess","oneAtATime","OneAtATime","setOwner","soundCache","errorCache","metadataCache","urlCache","proxyCache","macroCondition","isTesting","_determineAutoplayPermissions","isReady","isBlocked","currentSound","isPlaying","isLoading","loadTask","isRunning","currentId3Data","id3TagMetadata","currentMetadata","find","url","isStream","isSeekable","isFastForwardable","isRewindable","duration","percentLoaded","position","v","currentTime","_volume","debug","_setVolume","trigger","useSharedAudioAccess","_useSharedAudioElement","isMobileDevice","alwaysUseSingleAudioElement","value","isMuted","toggleMute","unmuteVolume","undefined","prepareLoadOptions","options","metadata","_createAndUnlockAudio","connections","connectionLoader","urlsOrPromise","_options","urlsToTry","resolve","join","remove","sound","findLoadedSound","strategies","_buildStrategies","filter","s","canPlay","length","map","connectionName","_handlePreloadError","e","success","failures","strategy","result","tryLoadingSoundTask","perform","catch","error","erroredSound","push","_debug","handleCurrentSoundTransitionTask","cache","register","_handleLoadError","waitForEvent","previousSound","load","promise","loadPromise","didCancel","playTask","previouslyPlayingSound","urlsAreEqual","_registerEvents","_attemptToPlaySound","race","waitForProperty","_handlePlaybackError","_shouldSilenceErrors","Object","keys","includes","silenceErrors","canAutoplay","audio","then","autoPlayAllowed","play","pause","assert","stop","cancelAll","togglePause","fastForward","rewind","resolveIdentifierTask","identifier","config","emberStereo","strategizer","Strategizer","connectionKey","Error","errorMessage","_errorMessageFromFailures","makeArray","forEach","debugInfo","failure","nativeAudioFailure","f","toString","_currentSound","isDestroyed","isDestroying","_unregisterEvents","_updateNowPlaying","emberArray","ConnectionLoader","connectionNames","names","loadedUrls","cachedList","loadedSounds","cachedSounds","cachedErrors","identifiers","BaseSound","findSound","soundProxy","has","SoundProxy","store","removeSound","StereoUrl","waitForSuccessTask","waitForFailureTask","newSound","createSound","tried","service","item","on","off","_relayEvent","eventName","info","next","_relayPlayedEvent","_relayPausedEvent","_relayEndedEvent","_relayDurationChangedEvent","_relayPositionChangedEvent","_relayLoadedEvent","_relayBlockedEvent","_relayLoadingEvent","_relayPositionWillChangeEvent","_relayWillRewindEvent","_relayWillFastForwardEvent","_relayMetadataChangedEvent","window","navigator","mediaSession","playbackState","title","artist","album","artwork","mediaAttributes","src","MediaMetadata","setActionHandler","seekInfo","seekTime","unlock","touchPlay","document","addEventListener","passive","blockCheck","later","one","removeEventListener","cancel","willDestroy","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","SoundCache","ErrorCache","MetadataCache","UrlCache","getOwnPropertyDescriptor"],"mappings":"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"}